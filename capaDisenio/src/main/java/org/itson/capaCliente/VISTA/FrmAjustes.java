/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.itson.capaCliente.VISTA;

import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import org.itson.capaCliente.PRESENTADOR.IPresentadorAjustes;
import org.itson.capadominio.Partida;

/**
 *
 * @author equipo 1
 */
public class FrmAjustes extends javax.swing.JFrame {

    private String color; // Color seleccionado (no utilizado en el código proporcionado)

    private String[] imagenes; // Arreglo de nombres de archivos de imágenes en el directorio /avatares
    private IPresentadorAjustes presentadorA; // Referencia al presentador de ajustes asociado

    private int posicion = 0; // Índice actual en el arreglo de imágenes
    private String imagen = null; // Nombre del archivo de imagen actualmente seleccionado
    private String imagenSeleccionada = null; // Imagen seleccionada (no utilizado en el código proporcionado)


    /**
     * Constructor de la clase FrmAjustes.
     * @param presentadorA Referencia al presentador de ajustes asociado.
     */
    public FrmAjustes(IPresentadorAjustes presentadorA) {
        initComponents();
        mostrar(posicion);
        imagenes = obtenerImg();
        this.presentadorA = presentadorA;
    }

//    public void mostrarTablero() {
//        Partida partida = presentadorA.regresarPartida();
//        if (partida == null) {
//            return;
//        }
//    }

   /**
     * Método para obtener la lista de nombres de archivos de imágenes en el directorio /avatares.
     * @return Arreglo de nombres de archivos de imágenes.
     */
    public String[] obtenerImg() {
        File f = new File(getClass().getResource("/avatares").getFile());
        String[] Imagenes = f.list();
        return Imagenes;
    }

    /**
     * Método para mostrar una imagen en el formulario según el índice proporcionado.
     * @param index Índice de la imagen en el arreglo de imágenes.
     */
    public void mostrar(int index) {
        String[] Imagen = obtenerImg();
        imagen = Imagen[index];
        ImageIcon icon = new ImageIcon(getClass().getResource("/avatares/" + imagen));
        Image image = icon.getImage().getScaledInstance(lblImagen.getWidth(), lblImagen.getHeight(), Image.SCALE_SMOOTH);
        lblImagen.setIcon(new ImageIcon(image));
    }

    /**
     * Método para mover a la siguiente imagen en la lista.
     */
    public void moverAbajo() {
        new Thread();
        try {
            Thread.sleep(300);
        } catch (InterruptedException ex) {
            Logger.getLogger(FrmAjustes.class.getName()).log(Level.SEVERE, null, ex);
        }
        int p = this.lblImagen.getX();
        if (p > -1) {
            posicion++;
            if (posicion >= obtenerImg().length) {
                posicion = 0;
            }
            mostrar(posicion);
        }
    }

    /**
     * Método para mover a la imagen anterior en la lista.
     */

    public void moverArriba() {
        new Thread();
        try {
            Thread.sleep(300);
        } catch (InterruptedException ex) {
            Logger.getLogger(FrmAjustes.class.getName()).log(Level.SEVERE, null, ex);
        }
        int p = this.lblImagen.getX();
        if (p > -1) {
            posicion--;
            if (posicion >= obtenerImg().length) {
                posicion = 0;
            }
            mostrar(posicion);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnReturn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnSiguiente = new javax.swing.JButton();
        btnSeleccion = new javax.swing.JButton();
        btnFlechaAbajo = new javax.swing.JButton();
        lblImagen = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        ColorRojo = new javax.swing.JPanel();
        colorAzul = new javax.swing.JPanel();
        colorAmarillo = new javax.swing.JPanel();
        colorVerde = new javax.swing.JPanel();
        checkRojo = new javax.swing.JCheckBox();
        checkAzul = new javax.swing.JCheckBox();
        checkMorado = new javax.swing.JCheckBox();
        checkVerde = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnReturn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/return.png"))); // NOI18N
        btnReturn.setBorderPainted(false);
        btnReturn.setContentAreaFilled(false);
        btnReturn.setFocusable(false);
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });
        getContentPane().add(btnReturn, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 73, -1));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnSiguiente.setText("sig");
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });
        jPanel1.add(btnSiguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 630, -1, -1));

        btnSeleccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionActionPerformed(evt);
            }
        });
        jPanel1.add(btnSeleccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, -1, -1));

        btnFlechaAbajo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Flecha abajo (1).png"))); // NOI18N
        btnFlechaAbajo.setContentAreaFilled(false);
        btnFlechaAbajo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnFlechaAbajoMousePressed(evt);
            }
        });
        btnFlechaAbajo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnFlechaAbajoKeyPressed(evt);
            }
        });
        jPanel1.add(btnFlechaAbajo, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 560, 80, 80));
        jPanel1.add(lblImagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 710, 680));

        jPanel2.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 0, 710, 680));
        jPanel2.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 150, 30));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Ingrese Nombre:");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, -1, -1));

        ColorRojo.setBackground(new java.awt.Color(255, 0, 0));
        jPanel2.add(ColorRojo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 80, 50));

        colorAzul.setBackground(new java.awt.Color(0, 0, 255));
        jPanel2.add(colorAzul, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 140, 90, 50));

        colorAmarillo.setBackground(new java.awt.Color(153, 0, 153));
        jPanel2.add(colorAmarillo, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 140, 90, 50));

        colorVerde.setBackground(new java.awt.Color(0, 255, 0));
        jPanel2.add(colorVerde, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 140, 100, 50));

        checkRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkRojoActionPerformed(evt);
            }
        });
        jPanel2.add(checkRojo, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, -1, -1));

        checkAzul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAzulActionPerformed(evt);
            }
        });
        jPanel2.add(checkAzul, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 200, -1, -1));

        checkMorado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkMoradoActionPerformed(evt);
            }
        });
        jPanel2.add(checkMorado, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 200, -1, -1));

        checkVerde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkVerdeActionPerformed(evt);
            }
        });
        jPanel2.add(checkVerde, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 200, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método invocado al presionar el botón de retorno.
     * Notifica al presentador de ajustes para regresar a la pantalla de creación de sala.
     * 
     * @param evt Evento de acción generado al presionar el botón de retorno.
     */
    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        presentadorA.btnRegresarCrearSala();
    }//GEN-LAST:event_btnReturnActionPerformed

    /**
     * Método invocado al presionar el botón de flecha abajo.
     * Realiza la navegación hacia abajo en la lista de avatares.
     * 
     * @param evt Evento del mouse al presionar el botón de flecha abajo.
     */
    private void btnFlechaAbajoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFlechaAbajoMousePressed
        // TODO add your handling code here:
        moverAbajo();
    }//GEN-LAST:event_btnFlechaAbajoMousePressed

    /**
     * Método invocado al presionar una tecla mientras el botón de flecha abajo tiene el foco.
     * Realiza la navegación hacia abajo o arriba en la lista de avatares según la tecla presionada.
     * 
     * @param evt Evento del teclado al presionar una tecla mientras el botón de flecha abajo tiene el foco.
     */
    private void btnFlechaAbajoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnFlechaAbajoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            moverAbajo();
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            moverArriba();
        }
    }//GEN-LAST:event_btnFlechaAbajoKeyPressed

    /**
     * Método invocado al presionar el botón de selección.
     * Gestiona la selección y deselección de un avatar.
     * 
     * @param evt Evento de acción generado al presionar el botón de selección.
     */
    private void btnSeleccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionActionPerformed
        // TODO add your handling code here:
        if (imagenSeleccionada != null) {
            imagenSeleccionada = null;
            btnSeleccion.setIcon(null);
        } else {
            imagenSeleccionada = imagen;
            btnSeleccion.setIcon(new ImageIcon(getClass().getResource("/iconos/heart.png")));
        }
    }//GEN-LAST:event_btnSeleccionActionPerformed

     /**
     * Método invocado al presionar el botón de siguiente.
     * Verifica si se ha seleccionado un avatar y notifica al presentador de ajustes para crear al jugador.
     * 
     * @param evt Evento de acción generado al presionar el botón de siguiente.
     */
    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        // Verificar si se ha seleccionado un avatar
        if (imagenSeleccionada == null) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un avatar.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return; // Detener la ejecución del método si no se ha seleccionado un avatar
        }
        // Continuar con la creación del jugador
        presentadorA.crearJugador(color, this.txtNombre.getText(), imagenSeleccionada);


    }//GEN-LAST:event_btnSiguienteActionPerformed

     /**
     * Método invocado al seleccionar el checkbox de color rojo.
     * Configura el color del jugador y gestiona la habilitación/deshabilitación de otros colores.
     * 
     * @param evt Evento de acción generado al seleccionar el checkbox de color rojo.
     */
    private void checkRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkRojoActionPerformed
        if (checkRojo.isSelected()) {
            checkAzul.setEnabled(false);
            checkMorado.setEnabled(false);
            checkVerde.setEnabled(false);
            color = "#F2040F";
        } else {
            checkAzul.setEnabled(true);
            checkMorado.setEnabled(true);
            checkVerde.setEnabled(true);
        }
    }//GEN-LAST:event_checkRojoActionPerformed

    /**
     * 
     * @param evt 
     */
    private void checkAzulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAzulActionPerformed
        if (checkAzul.isSelected()) {
            checkRojo.setEnabled(false);
            checkMorado.setEnabled(false);
            checkVerde.setEnabled(false);
            color = "#040FF2";
        } else {
            checkRojo.setEnabled(true);
            checkMorado.setEnabled(true);
            checkVerde.setEnabled(true);
        }
    }//GEN-LAST:event_checkAzulActionPerformed

    /**
     * Método invocado al seleccionar el checkbox de color verde.
     * Configura el color del jugador y gestiona la habilitación/deshabilitación de otros colores.
     * 
     * @param evt Evento de acción generado al seleccionar el checkbox de color verde.
     */
    private void checkMoradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkMoradoActionPerformed
        if (checkMorado.isSelected()) {
            checkAzul.setEnabled(false);
            checkRojo.setEnabled(false);
            checkVerde.setEnabled(false);
            color = "#8604F2";
        } else {
            checkAzul.setEnabled(true);
            checkRojo.setEnabled(true);
            checkVerde.setEnabled(true);
        }
    }//GEN-LAST:event_checkMoradoActionPerformed

    /**
     * 
     * @param evt 
     */
    private void checkVerdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkVerdeActionPerformed
        if (checkVerde.isSelected()) {
            checkAzul.setEnabled(false);
            checkMorado.setEnabled(false);
            checkRojo.setEnabled(false);
            color = "#28F204";
        } else {
            checkAzul.setEnabled(true);
            checkMorado.setEnabled(true);
            checkRojo.setEnabled(true);
        }
    }//GEN-LAST:event_checkVerdeActionPerformed

    /**
     * Método para obtener el nombre del archivo de imagen seleccionado.
     * @return Nombre del archivo de imagen seleccionado.
     */
    public String getImagenSeleccionada() {
        return imagen;
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(FrmAjustes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(FrmAjustes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(FrmAjustes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(FrmAjustes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new FrmAjustes().setVisible(true);
//            }
//        });
//    }

    /**
     * 
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ColorRojo;
    private javax.swing.JButton btnFlechaAbajo;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnSeleccion;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JCheckBox checkAzul;
    private javax.swing.JCheckBox checkMorado;
    private javax.swing.JCheckBox checkRojo;
    private javax.swing.JCheckBox checkVerde;
    private javax.swing.JPanel colorAmarillo;
    private javax.swing.JPanel colorAzul;
    private javax.swing.JPanel colorVerde;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
